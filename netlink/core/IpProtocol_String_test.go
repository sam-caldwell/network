package core

import (
	"testing"
)

func TestIpProtocol_String(t *testing.T) {
	tests := []struct {
		name     string
		protocol IpProtocol
	}{
		{protocol: IpProtoHOPOPT, name: "HOPOPT"},
		{protocol: IpProtoIcmp, name: "IpProtoIcmp"},
		{protocol: IpProtoIGMP, name: "IGMP"},
		{protocol: IpProtoGGP, name: "GGP"},
		{protocol: IpProtoIPv4Encapsulation, name: "IPv4"},
		{protocol: IpProtoST, name: "ST"},
		{protocol: IpProtoTCP, name: "TCP"},
		{protocol: IpProtoCBT, name: "CBT"},
		{protocol: IpProtoEGP, name: "EGP"},
		{protocol: IpProtoIGP, name: "IGP"},
		{protocol: IpProtoBBNRCCMON, name: "BBN-RCC-MON"},
		{protocol: IpProtoNVP_II, name: "NVP-II"},
		{protocol: IpProtoPUP, name: "PUP"},
		{protocol: IpProtoARGUS, name: "ARGUS"},
		{protocol: IpProtoEMCON, name: "EMCON"},
		{protocol: IpProtoXNET, name: "XNET"},
		{protocol: IpProtoCHAOS, name: "CHAOS"},
		{protocol: IpProtoUDP, name: "UDP"},
		{protocol: IpProtoMUX, name: "MUX"},
		{protocol: IpProtoDCNMEAS, name: "DCN-MEAS"},
		{protocol: IpProtoHMP, name: "HMP"},
		{protocol: IpProtoPRM, name: "PRM"},
		{protocol: IpProtoXNSIDP, name: "XNS-IDP"},
		{protocol: IpProtoTRUNK1, name: "TRUNK-1"},
		{protocol: IpProtoTRUNK2, name: "TRUNK-2"},
		{protocol: IpProtoLEAF1, name: "LEAF-1"},
		{protocol: IpProtoLEAF2, name: "LEAF-2"},
		{protocol: IpProtoRDP, name: "RDP"},
		{protocol: IpProtoIRTP, name: "IRTP"},
		{protocol: IpProtoISO_TP4, name: "ISO-TP4"},
		{protocol: IpProtoNETBLT, name: "NETBLT"},
		{protocol: IpProtoMFENSP, name: "MFE-NSP"},
		{protocol: IpProtoMERIT_INP, name: "MERIT-INP"},
		{protocol: IpProtoDCCP, name: "DCCP"},
		{protocol: IpProtoThirdPC, name: "3PC"},
		{protocol: IpProtoIDPR, name: "IDPR"},
		{protocol: IpProtoXTP, name: "XTP"},
		{protocol: IpProtoDDP, name: "DDP"},
		{protocol: IpProtoIDPR_CMTP, name: "IDPR-CMTP"},
		{protocol: IpProtoTPXX, name: "TP++"},
		{protocol: IpProtoIL, name: "IL"},
		{protocol: IpProtoIPv6Encapsulation, name: "IPv6"},
		{protocol: IpProtoSDRP, name: "SDRP"},
		{protocol: IpProtoIPv6Route, name: "IPv6-Route"},
		{protocol: IpProtoIPv6Frag, name: "IPv6-Frag"},
		{protocol: IpProtoIDRP, name: "IDRP"},
		{protocol: IpProtoRSVP, name: "RSVP"},
		{protocol: IpProtoGRE, name: "GRE"},
		{protocol: IpProtoMHRP, name: "MHRP"},
		{protocol: IpProtoBNA, name: "BNA"},
		{protocol: IpProtoESP, name: "ESP"},
		{protocol: IpProtoAH, name: "AH"},
		{protocol: IpProtoINLSP, name: "I-NLSP"},
		{protocol: IpProtoSWIPE, name: "SWIPE"},
		{protocol: IpProtoNARP, name: "NARP"},
		{protocol: IpProtoMOBILE, name: "MOBILE"},
		{protocol: IpProtoTLSP, name: "TLSP"},
		{protocol: IpProtoSKIP, name: "SKIP"},
		{protocol: IpProtoIPv6ICMP, name: "ICMPv6"},
		{protocol: IpProtoIPv6NoNxt, name: "IPv6-NoNxt"},
		{protocol: IpProtoIPv6Opts, name: "IPv6-Opts"},
		{protocol: IpProtoAnyHostInternal, name: "Any host internal protocol"},
		{protocol: IpProtoCFTP, name: "CFTP"},
		{protocol: IpProtoAnyLocalNetwork, name: "Any local network"},
		{protocol: IpProtoSatExpak, name: "SAT-EXPAK"},
		{protocol: IpProtoKRYPTOLAN, name: "KRYPTOLAN"},
		{protocol: IpProtoRVD, name: "RVD"},
		{protocol: IpProtoIPPC, name: "IPPC"},
		{protocol: IpProtoAnyDistributedFs, name: "Any distributed file system"},
		{protocol: IpProtoSATMON, name: "SAT-MON"},
		{protocol: IpProtoVISA, name: "VISA"},
		{protocol: IpProtoIpcv, name: "IPCU"},
		{protocol: IpProtoCPNX, name: "CPNX"},
		{protocol: IpProtoCPHB, name: "CPHB"},
		{protocol: IpProtoWSN, name: "WSN"},
		{protocol: IpProtoPVP, name: "PVP"},
		{protocol: IpProtoBRSATMON, name: "BR-SAT-MON"},
		{protocol: IpProtoSUNND, name: "SUN-ND"},
		{protocol: IpProtoWBMON, name: "WB-MON"},
		{protocol: IpProtoWBEXPAK, name: "WB-EXPAK"},
		{protocol: IpProtoISOIP, name: "ISO-IP"},
		{protocol: IpProtoVMTP, name: "VMTP"},
		{protocol: IpProtoSECUREVMTP, name: "SECURE-VMTP"},
		{protocol: IpProtoVINES, name: "VINES"},
		{protocol: IpProtoTTP, name: "TTP"},
		{protocol: IpProtoNSFNETIGP, name: "NSFNET-IGP"},
		{protocol: IpProtoDGP, name: "DGP"},
		{protocol: IpProtoTCF, name: "TCF"},
		{protocol: IpProtoEIGRP, name: "EIGRP"},
		{protocol: IpProtoOSPF, name: "OSPF"},
		{protocol: IpProtoSPRITRPC, name: "Sprite-RPC"},
		{protocol: IpProtoLARP, name: "LARP"},
		{protocol: IpProtoMTP, name: "MTP"},
		{protocol: IpProtoAX25, name: "AX.25"},
		{protocol: IpProtoIPIP, name: "IPIP"},
		{protocol: IpProtoMICP, name: "MICP"},
		{protocol: IpProtoSCCSP, name: "SCC-SP"},
		{protocol: IpProtoETHERIP, name: "ETHERIP"},
		{protocol: IpProtoENCAP, name: "ENCAP"},
		{protocol: IpProtoAnyPrivateEncryption, name: "Any private encryption scheme"},
		{protocol: IpProtoGMTP, name: "GMTP"},
		{protocol: IpProtoIFMP, name: "IFMP"},
		{protocol: IpProtoPNNI, name: "PNNI"},
		{protocol: IpProtoPIM, name: "PIM"},
		{protocol: IpProtoARIS, name: "ARIS"},
		{protocol: IpProtoSCPS, name: "SCPS"},
		{protocol: IpProtoQNX, name: "QNX"},
		{protocol: IpProtoAN, name: "A/N"},
		{protocol: IpProtoIPComp, name: "IPComp"},
		{protocol: IpProtoSNP, name: "SNP"},
		{protocol: IpProtoCompaqPeer, name: "Compaq-Peer"},
		{protocol: IpProtoIpxInIp, name: "IPX-in-IP"},
		{protocol: IpProtoVRRP, name: "VRRP"},
		{protocol: IpProtoPGM, name: "PGM"},
		{protocol: Any0HopProtocol, name: "Any 0-hop protocol"},
		{protocol: IpProtoL2TP, name: "L2TP"},
		{protocol: IpProtoDDX, name: "DDX"},
		{protocol: IpProtoIATP, name: "IATP"},
		{protocol: IpProtoSTP, name: "STP"},
		{protocol: IpProtoSRP, name: "SRP"},
		{protocol: IpProtoUTI, name: "UTI"},
		{protocol: IpProtoSMP, name: "SMP"},
		{protocol: IpProtoSM, name: "SM"},
		{protocol: IpProtoPTP, name: "PTP"},
		{protocol: IpProtoIsisOverIpv4, name: "ISIS over IPv4"},
		{protocol: IpProtoFIRE, name: "FIRE"},
		{protocol: IpProtoCRTP, name: "CRTP"},
		{protocol: IpProtoCRUDP, name: "CRUDP"},
		{protocol: IpProtoSSCOPMCE, name: "SSCOPMCE"},
		{protocol: IpProtoIPLT, name: "IPLT"},
		{protocol: IpProtoSPS, name: "SPS"},
		{protocol: IpProtoPIPE, name: "PIPE"},
		{protocol: IpProtoSctp, name: "SCTP"},
		{protocol: IpProtoFC, name: "FC"},
		{protocol: IpProtoRsvpE2EIgnore, name: "RSVP-E2E-IGNORE"},
		{protocol: IpProtoMobilityHeader, name: "Mobility Header"},
		{protocol: IpProtoUdpLite, name: "UDPLite"},
		{protocol: IpProtoMplsInIp, name: "MPLS-in-IP"},
		{protocol: IpProtoManet, name: "manet"},
		{protocol: IpProtoHIP, name: "HIP"},
		{protocol: IpProtoShim6, name: "Shim6"},
		{protocol: IpProtoWesp, name: "WESP"},
		{protocol: IpProtoRohc, name: "ROHC"},
		{protocol: IpProtoEthernet, name: "Ethernet"},
		{protocol: IpProtoAggFrag, name: "AGGFRAG"},
		{protocol: IpProtoNsh, name: "NSH"},
		{protocol: IpProtoMobility, name: "MOBILITY"},
		{protocol: IpProtoRohcTransport, name: "ROHC-TRANSPORT"},
		{protocol: IpProtoRohcInternal, name: "ROHC-INTERNAL"},
		{protocol: IpProtoWespInternal, name: "WESP-INTERNAL"},
		{protocol: IpProtoRohcCompressed, name: "ROHC-COMPRESSED"},
		{protocol: IpProtoReserved, name: "Reserved"},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			if got := test.protocol.String(); got != test.name {
				t.Errorf("Expected %s but got %s, protocol %d", test.name, got, test.protocol)
			}
		})
	}
}
