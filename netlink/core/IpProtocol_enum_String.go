package core

// String - converts IpProtocol value to its corresponding protocol name as a string.
//
// In the Internet Protocol version 4 (IPv4) [RFC791] there is a field called "Protocol" to identify the
// next level protocol.  This is an 8 bit (uint8) field.  In Internet Protocol version 6 (IPv6) [RFC8200],
// this field is called the "Next Header" field.
//
// Protocol numbers can be found in the IANA Protocol Numbers registry:
// See https://github.com/torvalds/linux/blob/master/include/uapi/linux/pkt_cls.h
//
//	http://en.wikipedia.org/wiki/List_of_IP_protocol_numbers,
//	https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
func (p *IpProtocol) String() string {
	switch *p {
	case IpProtoHOPOPT:
		return "HOPOPT"
	case IpProtoIcmp:
		return "IpProtoIcmp"
	case IpProtoIGMP:
		return "IGMP"
	case IpProtoGGP:
		return "GGP"
	case IpProtoIPv4Encapsulation:
		return "IPv4"
	case IpProtoST:
		return "ST"
	case IpProtoTCP:
		return "TCP"
	case IpProtoCBT:
		return "CBT"
	case IpProtoEGP:
		return "EGP"
	case IpProtoIGP:
		return "IGP"
	case IpProtoBBNRCCMON:
		return "BBN-RCC-MON"
	case IpProtoNVP_II:
		return "NVP-II"
	case IpProtoPUP:
		return "PUP"
	case IpProtoARGUS:
		return "ARGUS"
	case IpProtoEMCON:
		return "EMCON"
	case IpProtoXNET:
		return "XNET"
	case IpProtoCHAOS:
		return "CHAOS"
	case IpProtoUDP:
		return "UDP"
	case IpProtoMUX:
		return "MUX"
	case IpProtoDCNMEAS:
		return "DCN-MEAS"
	case IpProtoHMP:
		return "HMP"
	case IpProtoPRM:
		return "PRM"
	case IpProtoXNSIDP:
		return "XNS-IDP"
	case IpProtoTRUNK1:
		return "TRUNK-1"
	case IpProtoTRUNK2:
		return "TRUNK-2"
	case IpProtoLEAF1:
		return "LEAF-1"
	case IpProtoLEAF2:
		return "LEAF-2"
	case IpProtoRDP:
		return "RDP"
	case IpProtoIRTP:
		return "IRTP"
	case IpProtoISO_TP4:
		return "ISO-TP4"
	case IpProtoNETBLT:
		return "NETBLT"
	case IpProtoMFENSP:
		return "MFE-NSP"
	case IpProtoMERIT_INP:
		return "MERIT-INP"
	case IpProtoDCCP:
		return "DCCP"
	case IpProtoThirdPC:
		return "3PC"
	case IpProtoIDPR:
		return "IDPR"
	case IpProtoXTP:
		return "XTP"
	case IpProtoDDP:
		return "DDP"
	case IpProtoIDPR_CMTP:
		return "IDPR-CMTP"
	case IpProtoTPXX:
		return "TP++"
	case IpProtoIL:
		return "IL"
	case IpProtoIPv6Encapsulation:
		return "IPv6"
	case IpProtoSDRP:
		return "SDRP"
	case IpProtoIPv6Route:
		return "IPv6-Route"
	case IpProtoIPv6Frag:
		return "IPv6-Frag"
	case IpProtoIDRP:
		return "IDRP"
	case IpProtoRSVP:
		return "RSVP"
	case IpProtoGRE:
		return "GRE"
	case IpProtoMHRP:
		return "MHRP"
	case IpProtoBNA:
		return "BNA"
	case IpProtoESP:
		return "ESP"
	case IpProtoAH:
		return "AH"
	case IpProtoINLSP:
		return "I-NLSP"
	case IpProtoSWIPE:
		return "SWIPE"
	case IpProtoNARP:
		return "NARP"
	case IpProtoMOBILE:
		return "MOBILE"
	case IpProtoTLSP:
		return "TLSP"
	case IpProtoSKIP:
		return "SKIP"
	case IpProtoIPv6ICMP:
		return "ICMPv6"
	case IpProtoIPv6NoNxt:
		return "IPv6-NoNxt"
	case IpProtoIPv6Opts:
		return "IPv6-Opts"
	case IpProtoAnyHostInternal:
		return "Any host internal protocol"
	case IpProtoCFTP:
		return "CFTP"
	case IpProtoAnyLocalNetwork:
		return "Any local network"
	case IpProtoSatExpak:
		return "SAT-EXPAK"
	case IpProtoKRYPTOLAN:
		return "KRYPTOLAN"
	case IpProtoRVD:
		return "RVD"
	case IpProtoIPPC:
		return "IPPC"
	case IpProtoAnyDistributedFs:
		return "Any distributed file system"
	case IpProtoSATMON:
		return "SAT-MON"
	case IpProtoVISA:
		return "VISA"
	case IpProtoIpcv:
		return "IPCU"
	case IpProtoCPNX:
		return "CPNX"
	case IpProtoCPHB:
		return "CPHB"
	case IpProtoWSN:
		return "WSN"
	case IpProtoPVP:
		return "PVP"
	case IpProtoBRSATMON:
		return "BR-SAT-MON"
	case IpProtoSUNND:
		return "SUN-ND"
	case IpProtoWBMON:
		return "WB-MON"
	case IpProtoWBEXPAK:
		return "WB-EXPAK"
	case IpProtoISOIP:
		return "ISO-IP"
	case IpProtoVMTP:
		return "VMTP"
	case IpProtoSECUREVMTP:
		return "SECURE-VMTP"
	case IpProtoVINES:
		return "VINES"
	case IpProtoTTP:
		return "TTP"
	case IpProtoNSFNETIGP:
		return "NSFNET-IGP"
	case IpProtoDGP:
		return "DGP"
	case IpProtoTCF:
		return "TCF"
	case IpProtoEIGRP:
		return "EIGRP"
	case IpProtoOSPF:
		return "OSPF"
	case IpProtoSPRITRPC:
		return "Sprite-RPC"
	case IpProtoLARP:
		return "LARP"
	case IpProtoMTP:
		return "MTP"
	case IpProtoAX25:
		return "AX.25"
	case IpProtoIPIP:
		return "IPIP"
	case IpProtoMICP:
		return "MICP"
	case IpProtoSCCSP:
		return "SCC-SP"
	case IpProtoETHERIP:
		return "ETHERIP"
	case IpProtoENCAP:
		return "ENCAP"
	case IpProtoAnyPrivateEncryption:
		return "Any private encryption scheme"
	case IpProtoGMTP:
		return "GMTP"
	case IpProtoIFMP:
		return "IFMP"
	case IpProtoPNNI:
		return "PNNI"
	case IpProtoPIM:
		return "PIM"
	case IpProtoARIS:
		return "ARIS"
	case IpProtoSCPS:
		return "SCPS"
	case IpProtoQNX:
		return "QNX"
	case IpProtoAN:
		return "A/N"
	case IpProtoIPComp:
		return "IPComp"
	case IpProtoSNP:
		return "SNP"
	case IpProtoCompaqPeer:
		return "Compaq-Peer"
	case IpProtoIpxInIp:
		return "IPX-in-IP"
	case IpProtoVRRP:
		return "VRRP"
	case IpProtoPGM:
		return "PGM"
	case Any0HopProtocol:
		return "Any 0-hop protocol"
	case IpProtoL2TP:
		return "L2TP"
	case IpProtoDDX:
		return "DDX"
	case IpProtoIATP:
		return "IATP"
	case IpProtoSTP:
		return "STP"
	case IpProtoSRP:
		return "SRP"
	case IpProtoUTI:
		return "UTI"
	case IpProtoSMP:
		return "SMP"
	case IpProtoSM:
		return "SM"
	case IpProtoPTP:
		return "PTP"
	case IpProtoIsisOverIpv4:
		return "ISIS over IPv4"
	case IpProtoFIRE:
		return "FIRE"
	case IpProtoCRTP:
		return "CRTP"
	case IpProtoCRUDP:
		return "CRUDP"
	case IpProtoSSCOPMCE:
		return "SSCOPMCE"
	case IpProtoIPLT:
		return "IPLT"
	case IpProtoSPS:
		return "SPS"
	case IpProtoPIPE:
		return "PIPE"
	case IpProtoSctp:
		return "SCTP"
	case IpProtoFC:
		return "FC"
	case IpProtoRsvpE2EIgnore:
		return "RSVP-E2E-IGNORE"
	case IpProtoMobilityHeader:
		return "Mobility Header"
	case IpProtoUdpLite:
		return "UDPLite"
	case IpProtoMplsInIp:
		return "MPLS-in-IP"
	case IpProtoManet:
		return "manet"
	case IpProtoHIP:
		return "HIP"
	case IpProtoShim6:
		return "Shim6"
	case IpProtoWesp:
		return "WESP"
	case IpProtoRohc:
		return "ROHC"
	case IpProtoEthernet:
		return "Ethernet"
	case IpProtoAggFrag:
		return "AGGFRAG"
	case IpProtoNsh:
		return "NSH"
	case IpProtoMobility:
		return "MOBILITY"
	case IpProtoRohcTransport:
		return "ROHC-TRANSPORT"
	case IpProtoRohcInternal:
		return "ROHC-INTERNAL"
	case IpProtoWespInternal:
		return "WESP-INTERNAL"
	case IpProtoRohcCompressed:
		return "ROHC-COMPRESSED"
	case IpProtoReserved:
		return "Reserved"
	default:
		return "Unknown"
	}
}
